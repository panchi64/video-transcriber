 What's going on guys, this is Oliver, formerly from Response.ai and now from Tricom.com and GetSEA. And in this video, I'm going to be talking about how in every SaaS product I've ever built that was profitable, I've leveraged other people's code to achieve the end result for the user, right? And I've made hundreds of thousands of dollars doing this. And in this video, I'll explain how I did that and what you guys can do and what you can build with other people's code, also known as APIs, and why you might be overcomplicating just getting some customers via SaaS, right? So the most valuable skill in modern entrepreneurship and SaaS specifically is not code or design or sales. It's just recognizing patterns, right? People want things and you can give them these things at scale using SaaS, right? Now, the ability to see gaps and a sort of arbitrage between what an API or other people's code enables you to and what customers need. This is the art of API arbitrage and it's the closest thing we have to magic in 2025, right? So the Lego philosophy. So I'll explain what an API is. Obviously, people who already know, that's fine. It'll be a nice way of, you know, sort of understanding it in a different way. And people who do not know, then this is the explanation, right? So an API, imagine you're at a party where everyone brings half-built Lego sets, right? Let's assume that you're building a boat. Now, your contribution is a boat that is missing its sails. And someone else has a pirate flag, but no ship, etc., right? So an API is this agreement to trade pieces to make an end result or an end product that works. So you pay a small fee for their pirate flag. You attach it to your boat and suddenly your creation is a complete pirate boat and it's worth twice as much, right? It's a complete functioning pirate boat. This isn't just sort of collaboration. It's multiplying the value. And as long as you can pay people. And you can get a boat, right? Or some things are free. You can get whatever pieces you want to build the most beautiful boat in the world, right? Now, the magic lies in recognizing that no one cares, guys, how you built the sails. In the same sense, no one cares how you built your software. Customers only care. Listen to this. Customers only care that the boat floats and looks compelling. And in this case, customers only care that your SaaS delivers the result they want, right? But developers often gatekeep this, right? And they insist that you have to knit the sails yourself. Or what if the yarn is an organic? What if the stitching? This is called the tyranny of craftsmanship. And it conflates technical purity with business value. In other words, the only thing that matters is how your product is valuable to the customer, right? Not how it's built. Mark Anderson said in 2024, the best startups today are curators, not creators. So we are looking to curate tools that we can build with and then build on top of that and then charge the customer, right? Now, the epidemic of overcomplication. So there's a conspiracy in tech, right? So engineers inflate complexity to justify their expertise. They'll warn you about things like rate limits or authentication or edge cases or security. And all of these are valid concerns, but they are not valid or relevant until you've passed a certain threshold of, say, 100 customers, right? The goal, guys, for building a SaaS is not to build a faultless system. The goal is to build a system. That survives long enough to matter in the market and provide value to some customers. Because if you provide value to some, you can provide value to many, right? Now, when it comes to sort of using APIs, this is where the chat GPT wrapper comes from, right? So it's this phenomenon where every SaaS tool these days is just called a GPT wrapper, right? All that means is we took boring tools and we made them extraordinary by adding OpenAI's API. Or in other words, the chat. GPT API. Now, remember, an API is just you paying to access code that you couldn't build yourself. And I really, I personally do not want to try to rebuild chat GPT to just save a few pennies, right? So I'm going to access their code and use it in my project to make much more money and help much more people. Five years ago, for example, customer support bots followed these rigid scripts. Are you a customer? Yes. What is your email? X email. Do you have a receipt? Yes. Right. Now, with chat GPT and the APIs, they can mimic human interaction. You ever speak to a chat bot and it's like, hey, Steve, you know, really nice to see you here again. I love that you recently purchased this. It's crazy, right? This is because the simple app, which was customer support, just a yes, no, you know, sort of simple flow. It's accessing APIs to make it more powerful, right? So we go back to that example. It's completing the Lego boat. It's taking the half finished boat. It's taking the pirate flag and it's creating a pirate ship that we can sell for much more money. It provides much more value. Another example, right? So this is how you can commoditize the expertise of, you know, researchers and things like that and make a lot of money. So an example is you scrape LinkedIn jobs from something like Appify, which is just an API marketplace. I'll explain that later. You analyze the sentiment of the jobs with open AI. Like, you know, for example, the salary, what expertise is required, what experience is required, what degree or what college, you know, thing is required. And then you generate a PDF report with PDF shift, right? So that is three APIs guys that are acting in tandem. So you scrape the jobs with the LinkedIn API. You analyze the sentiment with open AI's API, and then you generate the report. That's three APIs that you are using to create the end result. Right? The total cost per user, if you add it all up would be, for example, 0.013 cents, right? Then you just charge 0.05 and you've got a pretty significant margin, right? So you scale to one, you know, 10,000 users and you're netting hundreds of dollars a day for moving data between pipes. You don't really touch much of this. You just take the LinkedIn jobs, you scrape them, you analyze them, you generate the report, and then it's done. That's just like a simple example, guys. The real profit lies in asymmetrical pricing guys, right? So APIs often charge per call or per request, right? While customers pay for the outcome of your software. So this is where it's important. My last SaaS, uh, response AI charge around $99 a month for 10,000 AI video credits, right? Now, knowing that every 10,000 credits costed us X amount in server costs. And that's a lot of money. And the APIs, I could charge for the margin and that's where you build the product, you know, profitable tool guys, right? So users rarely max their quotas, but the perception of abundance, like, oh, 10,000, it justified the price, right? So the hidden cost of independence. So the most profitable founders I know, they treat APIs and accessing other people's code like a tax on progress, right? It's a small fee guys to avoid having to reinvent the wheel. Every time. Every time you build a new software. So when I built a tool to scrape and analyze Twitter, um, for sentiment on Apple stock. As a, just a hobby project, I could have spent months reverse engineering X's, you know, anti-bot measures and how to scrape Twitter and stuff like that. Launching my own servers guys like that, Matt, instead I just paid 1 cent per result via rapid API or, um, appify whatever, and focused on what users actually wanted, which is the real time alerts about Apple sentiment. Like. People aren't happy with this. People are happy with that. The earnings report came back, all the stuff in a way that they can understand it. And I sent them an email every single day explaining it. Right. And that is how you build a simple app. I didn't have to learn how to scrape Twitter. I didn't have to learn how to analyze stuff with AI. I just used Twitter's, um, appify API, and then I just sent it to open AI to analyze. Right. And that's simple. The simple sort of pipeline. Now, the 1% rule guys is if an API. Solves even 1% of your problem. You use it, right? So your job is to stitch the remaining 99% into a narrative that customers will pay for. So in other words, when you stitch this pipeline together, it has to create the end result. The example is the, um, PDF report on Apple stock. Your SAS should create a result at the end that that users like right now, the less API APIs you use the better, but you don't have to kill yourself over it. Right? If you can't build. Something, it is okay to use an API. So this is the appify store guys. So I just wanted to talk a bit about this, like really quickly. Right? So as you can see, um, there'd be a link in the description to this. This is just a few of, um, the scrapers from appify. Right. And you see how. We can stitch these together with other APIs to create what is effectively a full scale tool, right? So. What you would do is let's say we want to create a web scraper that analyzes websites and allows you to ask questions about websites. So, for example, I scrape apple.com and then I can ask what is the price of its most recent product or what's some recent news about Apple. Right? So just to double, just to double confirm, we've got a tool that scrapes a website and then creates like a knowledge base for you to ask questions. Right? Simple, right? You are just going to. Use the web scraper, which is the first result there. You were going to crawl the website for the data, and then you were just going to send the data to open AI to analyze. Right? The prompt would be something like analyze this website, um, and note all of the important parts of it and tell me what their recent price is for their most recent launch product. This is how you've just immediately built a SAS. Without ever really touching code at all. You're creating the pipeline with a bit of code, like a bit of a front end and stuff, which I talk about in my last video, but you're hardly building the server to scrape a website. You're hardly building the AI large language model and spending three years doing that to analyze the tool to analyze the data. You are just sending the web scraper data to open AI. And then you've got yourself a very, very simple SAS. Right? Now, if I think of just like 10 ideas out of the blue. That take realistically, they take zero effort, but it's all about the execution, right? So you can just ask AI for different examples. Let's say I want to, you know, create an email finder. So what I would do is I would take clear bits API about scraping social media data, and then I would layer hunter.io's API finding emails on top of that. And you can just sell it as a lead gen tool. The tool could be, you know, enter a thousand LinkedIn URLs, and you get all of the emails. Yeah. And then you charge $200 a month for it guys. Like I know it's a, I know it's kind of just like, these are vague examples, but again, an AI invoice generator, right? So you take Stripe payments because they have an API and you send it to ChatGPT to manage and create an invoice. Right? Social media, right? Use open AI to suggest posts about a topic and then use buffers API to schedule them. Right? So this is how, again, how APIs are talking to each other. And an example is, you know, if you're using a web server. You could create a tool that scrapes LinkedIn for profiles and then adds them to HubSpot API. So that could be based off of a company that can be based off of a job posting, anything like that. Then something like a no code chat bot. So embed ChatGPT as a chat bot into a website, and then you just add the context for the support from the user's business. So like, you know, you would feed ChatGPT. And there's hundreds of different tutorials. Guys on how to make like a website chat bot with open AI. It's one of the first things that people ever built, right? So you've got like ChatBase, which is an amazing tool, guys. That like basically, you know, does this. It uses the person's business details as like training data. And then you can ask it questions about the, you know, the business. So you could go to a chiropractors website and say like, oh, what time can I come in on Tuesday? And it'll just say 9 a.m. Because that's the data it's trained on. Right? Again, these are just random ideas. Right? So you can go to a chiropractor's website and say like, oh, what time can I come in on Tuesday? And it'll just say 9 a.m. Because that's the data it's trained on. Right? Again, these are just random ideas. It took zero effort. Just ask AI for these. Like, oh, build me API-based tools and give me some examples. Right? Now, this is important, guys. The API Gold Rush and its traps. Right? So platforms like Apify and Rapid API, which is just these giant marketplaces for APIs. They're amazing and they've built millionaires. Right? And half of my SaaS tools, I have about six software tools. Right? Two of which would make in thousands of dollars a month. I use Appify in both of these, right? In both of the profitable ones that are actually scaling up and doing well right now. In total, have maybe 100 customers between the two, right? Chaining APIs does compound, right guys? So a one cent call in 10 steps means that you are getting charged a fair bit, right? So make sure that you are building what you can. An example is getseer.com. I mean, a better example is tricome.com, which is a database that I built of tech companies, right? I needed revenue data for the companies, right? And I don't know where to fucking find that, guys. I don't have the data. I can't scrape it offline, right? So what I did is I went on Appify and I found the SimilarWeb API. And you can call SimilarWeb or different tools like it and just get the traffic data or get the revenue data, whatever it may be. There's hundreds of them. I can't remember if it was SimilarWeb. It was... You know, some random get revenue for this company. The problem is that I did that for 100,000 companies and then it costed me, you know, $800 because I was doing it at a massive scale. So just make sure you understand that margin that you are building. So if it cost me one cent to call a LinkedIn job and then it costs me three cents to analyze it with AI, make sure that you know that four cents per call is... And you're charging, say, eight because it means that you're getting the 50% margin, right? So another thing is vendor locking, right? So if Twitter bans scrapers, your stock analyzer dies, right? You've got to always abstract third-party dependencies and make sure you have a few different vendors available in case one goes down. So for example, with GetSeer, I scrape Reddit to analyze it. And I analyze with OpenAI, but I sometimes analyze with Claude or Perplexity, whatever it may be, right? Or DeepSeek. Now, the reason I... The reason I do this is because if one of them goes down or one of them is faulty, it can just send the data to a different API, right? You've got to make sure you have a few different APIs. How this works is margin erosion, again, is that as APIs get cheaper, competitors undercut you and things like that. You've got to differentiate through context, right? So an example is when... If you have all of your data on a chatbot, you really don't want to have to switch and then download a different chatbot. Right? You want to make sure that all of your data is on there and it keeps a customer subscribed to you. So you've got to make sure that you're not just stringing APIs together, but you're building proper value for the customer, right? So following on from that, the API gold rush and its traps, right, is the antidote is to own the glue. So in other cases, you can build a proprietary workflow around APIs. For example, a financial app that manages, you know, sends data from a bank statement to ChatGPT, right? But I've also added in user specific rules. So for example, ignore Amazon charges under $50. This makes the output feel bespoke, and they're not going to get emailed every single day saying, oh, you're spending loads on Amazon, right? I know. That's why I've added that user specific rule. And if they go anywhere else for that, the same rules might not be available to them. So they might not get a product that is as good because I've made it personal to them. So maybe just rewind this and have a little re-listen of this. This sort of slide, it's very important that you guys build something that sticks people to it. So get seer, for example, my Reddit, my Reddit like analysis tool. I ask the user to add all of their business context, right? So whilst other companies like just scrape Reddit and say, oh, we found, you know, X people talking about, you know, Zoom. Instead, I'm taking the business context of the user and making it sticky for them. They have to stay there. And get leads from it because their business context is stuck on my app, right? This makes it all feel bespoke, even though most of the process is sort of automated, you know? Now, listen, guys, the psychology of pricing, selling outcomes is what you need to do, not APIs, right? So customers do not buy APIs. They buy outcomes. So a one cent API chain that generates a stock report is a sort of value illusion, right? When you frame the output as AI, powered financial advice, you're no longer selling data or just selling this string of APIs. You are selling clarity and confidence and time saved and this sort of feeling of like relief that they're not spending on random stuff, right? And let's take sort of local business therapist, right? Example, so deep seek and things like that. So by combining Google Maps, Yelp and GPT and things like that, the founder positioned the tool as a consultant for small business. So in other words, if you put a customer support tool on a local business therapist's website, you are effectively gaining value from that transaction because you're helping all of his customers, right? You are not building a little chat bot. You are helping a therapist manage his clients. So I hope that sort of, I hope you sort of understand what that means, guys. So at one cent per query, charging the, business therapist, sorry, the local business therapist, like 12 cents, it becomes irrelevant because the margin is massive. It's absolutely massive. It's like, it's like 12 times it, right? And that is the most important part, guys, is you are selling an outcome for someone. You are not selling this cool little tool that helps you do this, helps you do that. You are selling them the result of what the SaaS does. We do not buy SaaS. We buy a software to do a job for us. It's the most important thing to remember, guys. So. So let's go back to the new playbook. Find a dull problem. Accounting, scheduling, data entry, boring industries that are ripe for these like AI sprinkles, right? Then for every feature, you can ask, is there an API for this? So go on Perplexity and say, hi, is there recent 2025 APIs for scraping real estate data? Right? Then you price for the outcome, so you charge for the report and the time it saves, not for the API calls, right? So if a report on Apple stock could be worth 50 cents, then if you can get that report done for 10 cents, you've got a business, guys. You've scaled the glue then, right? So as you grow, replace costly APIs with the in-house stuff. So what we did with Response AI is we were being charged loads of money for these APIs on the way up. And then once we hit about 200 customers, we built the stuff in-house because we had developers and money and time, right? Only when the margins justify it can you build your own thing, right? The future belongs to founders who see APIs as the sort of brain to hijack. So your job isn't to think harder, it's to think as a connector. Like how can I connect different tools together to make a beautiful piece of software, right? And you'll find that a lot of stuff you can build yourself, but there's a few things that you'll need help with. So for example, I can't scrape Twitter, like I said, so I use an API for that. The final thought, guys, the next 1 million subscribers is a $1 million idea for you guys. It's not meant to be built by a team of 100 engineers, right? It'll be built by someone like you, who is a solo founder, who strings together three APIs, slaps on it like a pretty UI, and then charges 100 times the cost. This is what's happening with AI agents, guys. AI agents, it's just API strung together, that's it. All these AI agents are, they raised 10 million, 100 million, 1 billion, right? All these AI agents, they're just APIs just strung together. Like, you know, scrape website, analyze website, AI agent. Scrape recent real estate data, analyze the cost of houses in Chicago, AI agent. AI agent, come on, AI agent. Like, come on, guys. It's not an AI agent, is it? They're just calling it that because it sounds cool and it gets you loads of funding, right? We're here to build a tool. You can call it an AI agent if you want, because it helps with sales, right? Helps with sales. But you are here to build something that provides an outcome for someone. You charge them and you make sure that it costs less than you charge them, and you charge them to create that report or create that analysis or build that chat bot, whatever it may be. Now, some big heads in Silicon Valley might say, the next big thing starts out looking like a toy, right? So today, the best toys are borrowed Legos, right? They're made of borrowed Legos at the party when you turn up with the half-finished boat and then you help someone, they help you, you help them, you create a proper product, or you finish the pirate ship with the pirate flag. Build on APIs fast and charge for it. That is the end of the, my alarm's going off, actually. Where is my phone? That is the end of the video, guys. Oh, it's because I'm actually cooking chicken. So my chicken's probably burned. Any problems at all, give us a shout. Any questions you've got, guys, just let me know. Drop them in the comments, like, comment, subscribe, all that stuff. I love you, take care, bye-bye.